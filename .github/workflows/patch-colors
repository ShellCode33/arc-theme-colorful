#!/usr/bin/python3

import itertools
import re
import sys
from configparser import ConfigParser
from pathlib import Path

THIS_SCRIPT_LOCATION = Path(__file__).resolve().parent


def main(color: str) -> None:
    ref_palette_path = THIS_SCRIPT_LOCATION / Path("palettes/ref.conf")
    new_common_palette_path = THIS_SCRIPT_LOCATION / Path("palettes/common.conf")
    new_spe_palette_path = THIS_SCRIPT_LOCATION / Path("palettes/").joinpath(
        color,
    ).with_suffix(".conf")

    ref_palette = ConfigParser()
    ref_palette.read(ref_palette_path)
    ref_palette = dict(ref_palette["palette"].items())
    normalize_palette(ref_palette)

    new_common_palette = ConfigParser()
    new_common_palette.read(new_common_palette_path)
    new_common_palette = dict(new_common_palette["palette"].items())
    normalize_palette(new_common_palette)

    new_spe_palette = ConfigParser()
    new_spe_palette.read(new_spe_palette_path)
    new_spe_palette = dict(new_spe_palette["palette"].items())
    normalize_palette(new_spe_palette)

    common_keys = set(new_common_palette.keys()).intersection(new_spe_palette.keys())
    if len(common_keys) > 0:
        print(
            f"Error: common and {color} palettes both have the following keys:",
            common_keys,
            file=sys.stderr,
        )
        sys.exit(1)

    merged_common_and_ref = {}
    merged_common_and_ref.update(new_common_palette)
    merged_common_and_ref.update(new_spe_palette)

    keys_per_color_ref = {}
    for key, color_value in ref_palette.items():
        if color_value in keys_per_color_ref:
            keys_per_color_ref[color_value].append(key)
        else:
            keys_per_color_ref[color_value] = [key]

    keys_per_color = {}
    for key, color_value in merged_common_and_ref.items():
        if color_value in keys_per_color:
            keys_per_color[color_value].append(key)
        else:
            keys_per_color[color_value] = [key]

    expected_same_color_keys = [
        keys for _, keys in keys_per_color_ref.items() if len(keys) > 1
    ]

    keys_that_dont_match_color = []
    for keys in expected_same_color_keys:
        for a, b in itertools.combinations(keys, 2):
            if merged_common_and_ref[a] != merged_common_and_ref[b]:
                keys_that_dont_match_color.append((a, b))

    if keys_that_dont_match_color:
        print(
            "Error: the reference has the following keys which have the same colors:",
            expected_same_color_keys,
            file=sys.stderr,
        )

        print(
            f"Error: expected the common + {color} "
            "palette to share the same colors for these keys:",
            keys_that_dont_match_color,
            file=sys.stderr,
        )
        sys.exit(1)

    replacements = {
        color: merged_common_and_ref[key] for key, color in ref_palette.items()
    }

    for color_to_replace, replacement in replacements.items():
        print(f"Will replace {color_to_replace} with {replacement}")

    # Recursively walk through all files.
    for path in THIS_SCRIPT_LOCATION.parent.parent.joinpath("common").glob("**/*"):
        if not path.is_file():
            continue

        try:
            with path.open() as file:
                content = file.read()
        except UnicodeDecodeError:
            continue

        content = multireplace(content, replacements)

        with path.open("w") as file:
            file.write(content)


def normalize_palette(palette: dict[str, str]) -> None:
    palette_keys = list(palette.keys())

    for key in palette_keys:
        palette[key] = palette[key].lower()


def multireplace(string: str, replacements: dict[str, str]) -> str:
    """Replace substrings in a single pass."""
    rep_sorted = sorted(replacements, key=len, reverse=True)
    rep_escaped = map(re.escape, rep_sorted)

    pattern = re.compile("|".join(rep_escaped), flags=re.IGNORECASE)

    return pattern.sub(lambda match: replacements[match.group(0).lower()], string)


if __name__ == "__main__":
    main(sys.argv[1])
