#!/usr/bin/python3

"""
Generate all the palettes based on the given hues.

Can be useful to choose HSL colors: https://hslpicker.com
"""

import colorsys
from pathlib import Path

THIS_SCRIPT_LOCATION = Path(__file__).resolve().parent

HUES = {
    "red": 0,
    "orange": 25,
    "yellow": 50,
    "green": 100,
    "cyan": 175,
    "blue": 250,
    "purple": 275,
    "pink": 325,
}

SL_PER_COMPONENT = {
    "light_wm_button_close_bg": (100, 35),
    "light_wm_button_close_hover_bg": (100, 60),
    "light_wm_button_close_active_bg": (100, 70),
    "dark_wm_button_close_bg": (100, 35),
    "dark_wm_button_close_hover_bg": (100, 60),
    "dark_wm_button_close_active_bg": (100, 70),
    "selected_bg_color": (100, 35),
    "suggested_color": (100, 35),
    "toggle_button_off": (50, 35),
}


def main() -> None:
    for color_name, hue in HUES.items():
        palette_conf_filepath = THIS_SCRIPT_LOCATION / "palettes" / f"{color_name}.conf"

        with palette_conf_filepath.open("w") as palette_file:
            palette_file.write(
                "# Automatically generated by the generate-palettes script\n"
                "[palette]\n",
            )

            for component, (saturation, lightness) in SL_PER_COMPONENT.items():
                (r, g, b) = colorsys.hls_to_rgb(
                    hue / 360, lightness / 100, saturation / 100
                )
                (r, g, b) = (round(r * 255), round(g * 255), round(b * 255))
                print(
                    f"hsl({HUES[color_name]}, {saturation}%, {lightness}%) "
                    f"= rgb({r}, {g}, {b})",
                )
                hex_color = f"#{r:02x}{g:02x}{b:02x}"
                palette_file.write(f"{component} = {hex_color}\n")

        print("Ganerated", palette_conf_filepath)


if __name__ == "__main__":
    main()
